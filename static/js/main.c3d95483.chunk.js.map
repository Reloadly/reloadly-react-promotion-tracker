{"version":3,"sources":["promotions.js","App.js","reportWebVitals.js","index.js"],"names":["headers","Accept","Authorization","process","PromoTracker","useState","data","setData","countryCode","setCountryCode","loading","setLoading","PromoChecker","a","axios","get","then","res","response","className","href","target","rel","type","placeholder","onChange","e","value","onClick","disabled","style","marginRight","Spinner","animation","map","item","Accordion","Card","Toggle","as","Header","eventKey","title","Collapse","Body","denominations","dangerouslySetInnerHTML","__html","description","startDate","endDate","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+RAQMA,EAAU,CACdC,OAHgB,0CAIhBC,cALkBC,2yBAQL,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAY,uCAAG,sBAAAC,EAAA,6DACnBF,GAAW,GADQ,kBAGXG,IACHC,IACC,wDAA0DP,EAC1D,CACER,QAASA,IAGZgB,MAAK,SAACC,GACLV,EAAQU,EAAIX,SAXC,sDAcjBC,EAAQ,KAAEW,SAASZ,MAdF,OAgBnBK,GAAW,GAhBQ,yDAAH,qDAmBlB,OACE,sBAAKQ,UAAU,OAAf,UACE,yBAASA,UAAU,SAAnB,SACE,0BAASA,UAAU,eAAnB,UACE,0CADF,IACoB,uBAAU,IAC5B,+IAGK,IACL,uBACA,8BACG,IADH,gBAEgB,IACd,mBACEC,KAAK,+DACLC,OAAO,SACPC,IAAI,aAHN,kBAMK,IATP,4CAYA,0BAASH,UAAU,qBAAnB,UACE,uBACEI,KAAK,OACLC,YAAY,wBACZC,SAAU,SAACC,GAAD,OAAOjB,EAAeiB,EAAEL,OAAOM,UAE3C,yBAAQR,UAAU,MAAMS,QAAShB,EAAciB,SAAUnB,EAAzD,UACGA,GACC,mBACES,UAAU,wBACVW,MAAO,CAAEC,YAAa,SAGzBrB,GAAW,cAACsB,EAAA,EAAD,CAASC,UAAU,YAC7BvB,GAAW,qDAKrB,yBAASS,UAAU,WAAnB,SACGb,EAAK4B,KAAI,SAACC,GAAD,OACR,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMlB,UAAU,gBAAhB,UACE,eAACiB,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAUN,EAA7C,UACGA,EAAKO,MADR,IACe,oDAEf,cAACN,EAAA,EAAUO,SAAX,CAAoBF,SAAUN,EAA9B,SACE,eAACE,EAAA,EAAKO,KAAN,WACE,4BAAIT,EAAKU,gBACT,mBAAGC,wBAAyB,CAAEC,OAAQZ,EAAKa,eAC3C,4BAAIb,EAAKc,YACT,4BAAId,EAAKe,mBAVDf,EAAKgB,Y,MCpEhBC,MARf,WACE,OACE,qBAAKjC,UAAU,MAAf,SACE,cAACf,EAAD,OCKSiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.c3d95483.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Accordion, Card, Spinner } from \"react-bootstrap\";\r\nimport \"./promotions.css\";\r\n\r\nconst accessToken = process.env.REACT_APP_ACCESS_TOKEN;\r\nconst reloadlyJSON = `application/com.reloadly.topups-v1+json`;\r\n\r\nconst headers = {\r\n  Accept: reloadlyJSON,\r\n  Authorization: accessToken,\r\n};\r\n\r\nexport default function PromoTracker() {\r\n  const [data, setData] = useState([]);\r\n  const [countryCode, setCountryCode] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const PromoChecker = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await axios\r\n        .get(\r\n          `https://topups.reloadly.com/promotions/country-codes/` + countryCode,\r\n          {\r\n            headers: headers,\r\n          }\r\n        )\r\n        .then((res) => {\r\n          setData(res.data);\r\n        });\r\n    } catch (e) {\r\n      setData(e.response.data);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <section className=\"header\">\r\n        <section className=\"instructions\">\r\n          <h1>Welcome!</h1> <br></br>{\" \"}\r\n          <p>\r\n            You can search for ongoing promotions for mobile top-ups in a\r\n            country by using the country's Alpha 2 ISO code.\r\n          </p>{\" \"}\r\n          <br></br>\r\n          <p>\r\n            {\" \"}\r\n            Refer to this{\" \"}\r\n            <a\r\n              href=\"https://www.nationsonline.org/oneworld/country_code_list.htm\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              page\r\n            </a>{\" \"}\r\n            for a complete directory of ISO codes.\r\n          </p>\r\n          <section className=\"input_instructions\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter country code...\"\r\n              onChange={(e) => setCountryCode(e.target.value)}\r\n            />\r\n            <button className=\"btn\" onClick={PromoChecker} disabled={loading}>\r\n              {loading && (\r\n                <i\r\n                  className=\"fa fa-refresh fa-spin\"\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n              )}\r\n              {loading && <Spinner animation=\"border\" />}\r\n              {!loading && <span>Search</span>}\r\n            </button>\r\n          </section>\r\n        </section>\r\n      </section>\r\n      <section className=\"response\">\r\n        {data.map((item) => (\r\n          <Accordion key={item.id}>\r\n            <Card className=\"response_card\">\r\n              <Accordion.Toggle as={Card.Header} eventKey={item}>\r\n                {item.title} <b>&nbsp; &nbsp; &#8693;</b>\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey={item}>\r\n                <Card.Body>\r\n                  <p>{item.denominations}</p>\r\n                  <p dangerouslySetInnerHTML={{ __html: item.description }}></p>\r\n                  <p>{item.startDate}</p>\r\n                  <p>{item.endDate}</p>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          </Accordion>\r\n        ))}\r\n      </section>\r\n    </div>\r\n  );\r\n}","// import './App.css';\nimport PromoTracker from './promotions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PromoTracker/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}